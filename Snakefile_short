import glob

read_1s = glob.glob("RawData_renamed/*_R1.fastq.gz")
read_2s = glob.glob("RawData_renamed/*_R2.fastq.gz")

samples_path = [i.replace("_R1.fastq.gz", "") for i in read_1s]
samples = [i.replace("RawData_renamed/", "") for i in samples_path]

rule run_bins:
  input:
    expand("outfiles/{sample}{assbin}.out", sample=samples, assbin=["megahit", "idba", "megahitbinned", "idbabinned"])
  output:
    "run.binsdone"
  shell:
    "cat {input} > {output}"

rule all:
	input:
		expand("{sample}_{pair}.fastq.gz", sample=samples, pair=['R1', 'R2'])
		

rule qc:
	input:
		read_1="RawData_renamed/{sample}_R1.fastq.gz",
		read_2="RawData_renamed/{sample}_R2.fastq.gz",
		adapters="/home/ileleiwi/miniconda3/envs/metagenomics/opt/bbmap-38.79-0/resources/adapters.fa"
	output:
		read_I="qc/{sample}_I_qc.fastq.gz"
	threads: 20
	shell:
		"bbduk.sh -Xmx100G threads={threads} overwrite=t ktrim=r k=23 mink=11 hdist=1 qtrim=rl trimq=20 minlen=75 maq=10 in1={input.read_1} in2={input.read_2} ref={input.adapters} out={output.read_I}"

rule nomouse:
	input:
		read=rules.qc.output.read_I,
		mouse_genome="/home/projects-wrighton/NIH_Salmonella/KaiMetaG_20200327/mouse_masked.fa"
	output:
		read_nomouse="nomouse/{sample}_I_qc_nomouse.fastq.gz"
	threads: 20
	shell:
		"bbduk.sh -Xmx200G threads={threads} ref={input.mouse_genome} in={input.read} out={output.read_nomouse}"


rule fastas_samples:
	input:
		read=rules.nomouse.output.read_nomouse
	output:
		fasta="fastas/{sample}_I_qc_nomouse.fa"
	run:
		shell("reformat.sh in={input.read} out={output.fasta}")
	

rule assemble_Megahit_samples:
	input:
		fasta=rules.fastas_samples.output.fasta
	output:
		output_file="outfiles/{sample}megahit.out",
		scaff2500="Megahit/{sample}/scaffold_2500.fa"
	params:
		output_dir="Megahit/{sample}"		
	threads: 20
	run:
		shell("megahit -t {threads} --12 {input.fasta} -o {params.output_dir} --force")
		shell("pullseq.py -i {params.output_dir}/final.contigs.fa -o {params.output_dir}/scaffold_2500.fa -m 2500")
		shell("touch {output.output_file}")


rule assemble_IDBA_samples:
	input:
		fasta=rules.fastas_samples.output.fasta
	output:
		output_file="outfiles/{sample}idba.out",
		scaff2500="IDBA/{sample}/scaffold_2500.fa"
	params:
		output_dir="IDBA/{sample}"
	threads: 20
	run:
		shell("idba_ud --num_threads {threads} -r {input.fasta} -o {params.output_dir}")
		shell("pullseq.py -i {params.output_dir}/scaffold.fa -o {params.output_dir}/scaffold_2500.fa -m 2500")
		shell("touch {output.output_file}")


rule sortedbam_Megahit_samples:
	input:
		scaff2500=rules.assemble_Megahit_samples.output.scaff2500,
		reads=rules.nomouse.output.read_nomouse
	output:
		mapped_bam="Megahit/{sample}/mapped.bam"
	params:
		output_dir="Megahit/{sample}"
	threads: 20
	run:
		shell("bbmap.sh -Xmx200G threads={threads} in={input.reads} minid=97 ref={input.scaff2500} out={params.output_dir}mapped_97.sam")
		shell("samtools view -@ {threads} -bS mapped_97.sam > {params.output_dir}/mapped_97.bam")
		shell("samtools sort -@ {threads} -T mapped.sorted -o {params.output_dir}/mapped.bam {params.output_dir}/mapped_97.bam")
		shell("rm {params.output_dir}/mapped_97.bam {params.output_dir}/mapped_97.sam")


rule sortedbam_IDBA_samples:
	input:
		scaff2500=rules.assemble_IDBA_samples.output.scaff2500,
		reads=rules.nomouse.output.read_nomouse
	output:
		mapped_bam="IDBA/{sample}/mapped.bam"
	params:
		output_dir="IDBA/{sample}"
	threads: 20
	run:
		shell("bbmap.sh -Xmx200G threads={threads} in={input.reads} minid=97 ref={input.scaff2500} out={params.output_dir}mapped_97.sam")
		shell("samtools view -@ {threads} -bS mapped_97.sam > {params.output_dir}/mapped_97.bam")
		shell("samtools sort -@ {threads} -T mapped.sorted -o {params.output_dir}/mapped.bam {params.output_dir}/mapped_97.bam")
		shell("rm {params.output_dir}/mapped_97.bam {params.output_dir}/mapped_97.sam")


rule bin_Megahit_samples:
	input:
		scaff2500=rules.assemble_Megahit_samples.output.scaff2500,
		bam=rules.sortedbam_Megahit_samples.output.mapped_bam
	output:
		output_file="outfiles/{sample}megahitbinned.out",
		output_bins=directory("Megahit/{sample}/megahit_assembly/scaffold_2500.fa")
	run:
		shell("runMetaBat.sh {input.scaff2500} {input.bam}")
		shell("touch {output.output_file}")

rule bin_IDBA_samples:
	input:
		scaff2500=rules.assemble_IDBA_samples.output.scaff2500,
		bam=rules.sortedbam_IDBA_samples.output.mapped_bam
	output:
		output_file="outfiles/{sample}idbabinned.out",
		output_bins=directory("IDBA/{sample}/scaffold_2500.fa.metabat-bins")
	run:
		shell("runMetaBat.sh {input.scaff2500} {input.bam}")
		shell("touch {output.output_file}")


rule checkM_IDBA:
	input:
		bin_directory=rules.bin_IDBA_samples.output.output_bins
	params:
		output_dir="IDBA/{sample}/scaffold_2500.fa.metabat-bins/checkM"
	output:
		output_file="outfiles/{sample}idbacheckm.out",
		checkm_output="IDBA/{sample}/scaffold_2500.fa.metabat-bins/checkM/lineage.ms"
	threads: 20
	run:
		shell("checkm lineage_wf {input.bin_directory} {params.output_dir} -t {threads}  -x fa --tab_table")

rule checkM_Megahit:
	input:
		bin_directory=rules.bin_Megahit_samples.output.output_bins
	params:
		output_dir="Megahit/{sample}/megahit_assembly/scaffold_2500.fa/checkM"
	output:
		output_file="outfiles/{sample}megahitcheckm.out",
		checkm_output="Megahit/{sample}/scaffold_2500.fa.metabat-bins/checkM/lineage.ms"
	threads: 20
	run:
		shell("checkm lineage_wf {input.bin_directory} {params.output_dir} -t {threads}  -x fa --tab_table")


rule checkM_table_IDBA:
	input:
		marker_file=rules.checkM_IDBA.output.checkm_output
	params:
		analyze_dir="IDBA/{sample}/scaffold_2500.fa.metabat-bins/checkM"
	output:
		checkm_table="IDBA/{sample}/scaffold_2500.fa.metabat-bins/checkM/analyze_bins.txt"
	run:
		shell("checkm qa {marker_file} {analyze_dir} -o 1 -f analyze_bins.txt --tab_table")

rule checkM_table_Megahit:
	input:
		marker_file=rules.checkM_Megahit.output.checkm_output
	params:
		analyze_dir="Megahit/{sample}/scaffold_2500.fa.metabat-bins/checkM"
	output:
		checkm_table="Megahit/{sample}/scaffold_2500.fa.metabat-bins/checkM/analyze_bins.txt"
	run:
		shell("checkm qa {marker_file} {analyze_dir} -o 1 -f analyze_bins.txt --tab_table")




		




